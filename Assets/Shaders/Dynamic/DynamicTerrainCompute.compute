//******************************************************************************
//
// Copyright (C) SAAB AB
//
// All rights, including the copyright, to the computer program(s) 
// herein belong to Saab AB. The program(s) may be used and/or
// copied only with the written permission of Saab AB, or in
// accordance with the terms and conditions stipulated in the
// agreement/contract under which the program(s) have been
// supplied. 
//
//
// Information Class:	COMPANY UNCLASSIFIED
// Defence Secrecy:		NOT CLASSIFIED
// Export Control:		NOT EXPORT CONTROLLED
//
//
// File			: DynamicTerrainCompute.compute
// Module		:
// Description	: Shader Code
// Author		: ALBNI
// Product		: BTA
//
//
// Revision History...
//
// Who	Date	Description
//
// Links:
// http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/
//
//******************************************************************************

// Kernels
#pragma kernel MeshGrassGenerator
#pragma kernel MeshTreeGenerator
#pragma kernel IndirectGrass
#pragma kernel Cull
#pragma kernel TreeCull
#pragma kernel FindQuad

// Minimum / maximum integer values
#define intMin -2147483648
#define intMax 2147483647
#define plasticConstant 1.32471795724474602596

// Buffers
StructuredBuffer<float3> surfaceVertices;
StructuredBuffer<int> surfaceIndices;
StructuredBuffer<float2> surfaceUVs;

// Calculated points
AppendStructuredBuffer<float4> terrainPoints;

// culling
StructuredBuffer<float4> Input;
AppendStructuredBuffer<float4> Output;
AppendStructuredBuffer<float4> closeBuffer;

// Geometry
AppendStructuredBuffer<float4> SmallestQuad;

// Indirect buffer
RWStructuredBuffer<int> indirectBuffer;

// Textures
Texture2D<float4> splatMap;                     // Grass splatMap
Texture2D<float3> PlacementMap;                 // placementMap
Texture2D<float4> NodeTexture;                  // Map tile texture
Texture2D<float4> BillboardPlane;               // Billboard

// Variables
float surfaceGridStep;
float surfaceSize;
uint cullCount;
uint indexCount;
uint BillboardPlaneResolution;

float4 frustumPlanes[6];						// Frustum planes (6 planes * 4 floats: [ normal.x, normal.y, normal.z, distance ])
float3 terrainOffset;                           // Terrain offset in meters
float4x4 ObjToWorld;
int terrainResolution;                          // Resolution of texture

// Terrain frustum culling
inline bool IsInFrustum(float3 positionAfterProjection, float treshold = 1)
{
	float cullValue = treshold;

	return (dot(frustumPlanes[0].xyz, positionAfterProjection) >= cullValue &&
		dot(frustumPlanes[1].xyz, positionAfterProjection) >= cullValue &&
		dot(frustumPlanes[2].xyz, positionAfterProjection) >= cullValue &&
		dot(frustumPlanes[3].xyz, positionAfterProjection) >= cullValue) &&
		(frustumPlanes[5].w >= abs(distance(float3(0, 0, 0), positionAfterProjection)));
}

// ************* Get Grass Type *************

int GetFeatureType(uint i, uint valid[8])
{
	uint Types[] = { 0,0,0,0,0,0,0,0 };
	int index = 0;

	for (int x = 0; x < 8; x++)
	{
		if (valid[x] == 1)
		{
			Types[index] = x;
			index++;
		}
	}
	if (index == 0)
	{
		return -1;
	}

	return Types[i % index];
}

int intToByte(float3 rgb, int start)
{
	int byte[] = { 0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0 };

	int r = (rgb.x >= 1.0 ? 255 : floor(rgb.x * 256.0));
	int g = (rgb.y >= 1.0 ? 255 : floor(rgb.y * 256.0));
	int b = (rgb.z >= 1.0 ? 255 : floor(rgb.z * 256.0));

	float tmp = r / 2.0f;
	byte[0] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[1] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[2] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[3] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[4] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[5] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[6] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[7] = floor(tmp) < tmp ? 1 : 0;

	tmp = g / 2.0f;
	byte[8] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[9] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[10] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[11] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[12] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[13] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[14] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[15] = floor(tmp) < tmp ? 1 : 0;

	tmp = b / 2.0f;
	byte[16] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[17] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[18] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[19] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[20] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[21] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[22] = floor(tmp) < tmp ? 1 : 0;
	tmp = floor(tmp) / 2.0f;
	byte[23] = floor(tmp) < tmp ? 1 : 0;

	//return 1;
	return byte[start] + (byte[start + 1] * 2);
}

int GetType(uint color, uint i)
{
	uint Types[] = { 0,0,0,0,0,0,0,0 };

	float tmp = color / 2.0f;
	Types[0] = floor(tmp) < tmp ? (uint)1 : 0;
	tmp = floor(tmp) / 2.0f;
	Types[1] = floor(tmp) < tmp ? (uint)1 : 0;
	tmp = floor(tmp) / 2.0f;
	Types[2] = floor(tmp) < tmp ? (uint)1 : 0;
	tmp = floor(tmp) / 2.0f;
	Types[3] = floor(tmp) < tmp ? (uint)1 : 0;
	tmp = floor(tmp) / 2.0f;
	Types[4] = floor(tmp) < tmp ? (uint)1 : 0;
	tmp = floor(tmp) / 2.0f;
	Types[5] = floor(tmp) < tmp ? (uint)1 : 0;
	tmp = floor(tmp) / 2.0f;
	Types[6] = floor(tmp) < tmp ? (uint)1 : 0;
	tmp = floor(tmp) / 2.0f;
	Types[7] = floor(tmp) < tmp ? (uint)1 : 0;

	int valid = GetFeatureType(i, Types);
	return valid;
}

// ************* HSV *************
float3 RGBToHSV(float3 RGB)
{
	float R = (RGB.x >= 1.0 ? 255 : RGB.x * 256.0);
	float G = (RGB.y >= 1.0 ? 255 : RGB.y * 256.0);
	float B = (RGB.z >= 1.0 ? 255 : RGB.z * 256.0);

	float h = 0, s;

	float v = max(max(R, G), B);
	float Cmin = min(min(R, G), B);

	float delta = v - Cmin;

	if (v == 0.0) { s = 0; }
	else { s = delta / v; }

	if (s == 0) { h = 0.0; }
	else
	{
		if (R == v)
		{
			h = (G - B) / delta;
		}
		else if (G == v)
		{
			h = 2 + (B - R) / delta;
		}
		else if (B == v)
		{
			h = 4 + (R - G) / delta;
		}

		h *= 60;
		if (h < 0.0) { h = h + 360; }
	}

	return float3(h, s, (v / 255));
}

bool InRange(float3 value, float3 v1, float3 v2)
{
	if (value.x >= min(v1.x, v2.x) && value.x <= max(v1.x, v2.x))
	{
		//return true;
		if (value.y >= min(v1.y, v2.y) && value.y <= max(v1.y, v2.y))
		{
			if (value.z >= min(v1.z, v2.z) && value.z <= max(v1.z, v2.z))
			{
				return true;
			}
		}
	}
	return false;
}

// ************* Mesh Grass *************
[numthreads(8, 1, 1)]
// can calculate a maximum of (65535 * 8) 524,280 triangles parallel
void MeshGrassGenerator(int3 id : SV_DispatchThreadID)
{
	float density = surfaceGridStep;
	uint index = id.x * 3;

	if (index >= indexCount) { return; }

	float3 v1 = surfaceVertices[surfaceIndices[index]];
	float3 v2 = surfaceVertices[surfaceIndices[index + 1]];
	float3 v3 = surfaceVertices[surfaceIndices[index + 2]];

	float2 uv1 = surfaceUVs[surfaceIndices[index]];
	float2 uv2 = surfaceUVs[surfaceIndices[index + 1]];
	float2 uv3 = surfaceUVs[surfaceIndices[index + 2]];

	// Area
	float area = length(cross((v2 - v1), (v3 - v1))) / 2;
	if (area < density) { return; }
	int grassAmount = area / density;

	//float t = grassAmount;
	//float end = (t * id.y);
	//float start = end - t;

	// ************* Barycentric coordinate *************
	//float i = 0;
	for (int i = 0; i < grassAmount; i += 1.0f)
	{
		float a1 = 1 / (plasticConstant);
		float a2 = 1 / ((plasticConstant) * (plasticConstant));

		float r1 = frac(0.5 + a1 * i);
		float r2 = frac(0.5 + a2 * i);

		float2 uv = (1 - sqrt(r1)) * uv1 + (sqrt(r1) * (1 - r2)) * uv2 + (sqrt(r1) * r2) * uv3;
		float3 newPoint = (1 - sqrt(r1)) * v1 + (sqrt(r1) * (1 - r2)) * v2 + (sqrt(r1) * r2) * v3;
		float3 finalPoint = newPoint.xyz;


		float4 color = splatMap[uv * terrainResolution];
		float4 nodeColor = NodeTexture[uv * 512];
		//float3 placement = PlacementMap[uv * 512];

		//int chance = intToByte(placement, 0);
		// ****** 1 <=> 0.004 ******
		// ****** 2 <=> 0.008 ******
		// ****** 3 <=> 0.012 ******
		//int chance = intToByte(float3(0.008, 0, 0), 0);

		//if (chance > 0)
		{
			//if ((i % 3) <= chance)
			{
				uint blueColor = (color.z >= 1.0 ? 255 : color.z * 256.0);

				int valid = GetType(blueColor, i);
				if (valid != -1)
				{
					float3 HSV = RGBToHSV(nodeColor.xyz);

					// TODO: only until we generate a proper splatmap
					if (InRange(HSV, float3(22, 0.2, 0), float3(170, 1, 1)))
					{
						terrainPoints.Append(float4(finalPoint.xyz, valid));
					}
				}
			}
		}
	}
}

// ************* Mesh Tree *************
[numthreads(8, 1, 1)]
// can calculate a maximum of (65535 * 8) 524,280 triangles parallel
void MeshTreeGenerator(int3 id : SV_DispatchThreadID)
{
	float density = surfaceGridStep;
	uint index = (id.x * 3);
	if (index >= indexCount) { return; }

	float3 v1 = surfaceVertices[surfaceIndices[index]];
	float3 v2 = surfaceVertices[surfaceIndices[index + 1]];
	float3 v3 = surfaceVertices[surfaceIndices[index + 2]];

	float2 uv1 = surfaceUVs[surfaceIndices[index]];
	float2 uv2 = surfaceUVs[surfaceIndices[index + 1]];
	float2 uv3 = surfaceUVs[surfaceIndices[index + 2]];
	// Area

	float area = length(cross((v2 - v1), (v3 - v1))) / 2;
	if (area < density) { return; }
	float grassAmount = area / density;
	//float halfDensity = density / 2;

	// ************* Barycentric coordinate *************
	for (int i = 0; i < grassAmount; i++)
	{
		float a1 = 1 / (plasticConstant);
		float a2 = 1 / ((plasticConstant) * (plasticConstant));

		float r1 = frac(0.5 + a1 * i);
		float r2 = frac(0.5 + a2 * i);

		float2 uv = (1 - sqrt(r1)) * uv1 + (sqrt(r1) * (1 - r2)) * uv2 + (sqrt(r1) * r2) * uv3;
		float3 newPoint = (1 - sqrt(r1)) * v1 + (sqrt(r1) * (1 - r2)) * v2 + (sqrt(r1) * r2) * v3;
		float3 finalPoint = newPoint.xyz;

		float4 color = splatMap[uv * terrainResolution];
		float4 nodeColor = NodeTexture[uv * 512];
		//float3 placement = PlacementMap[uv * 512];

		//int chance = intToByte(placement, 4);
		// ****** 48 <=> 0.189 ******
		// ****** 32 <=> 0.126 ******
		// ****** 16 <=> 0.063 ******
		//int chance = inttobyte(float3(0.063, 0, 0), 4);

		//if (chance > 0)
		{
			//if ((i % 3) <= chance)
			{
				uint blueColor = (color.z >= 1.0 ? 255 : color.z * 256.0);

				int valid = GetType(blueColor, i);
				//if (valid != -1)
				{
					float3 HSV = RGBToHSV(nodeColor.xyz);

					// TODO: only until we generate a proper splatmap
					if (InRange(HSV, float3(80, 0.2, 0), float3(140, 1, 1)))
					{
						terrainPoints.Append(float4(finalPoint.xyz, valid));
					}
				}
			}
		}
	}
}

// ************* 2D projection *************
[numthreads(8, 8, 1)]
void ProjectionGenerator(int3 id : SV_DispatchThreadID)
{
	int x = id.x;
	int y = id.y;

	float density = surfaceGridStep;
	// node size
	float size = surfaceSize;

	float width = size / density;
	float height = width;

	// place points evenly on plane
	// project points on mesh
}

// ************* Cull shader *************
// can cull a maximum of (65535 * 128) 8,388,480 grass strains parallel
[numthreads(128, 1, 1)]
void Cull(uint3 id : SV_DispatchThreadID)
{
	int index = id.x;
	if (index >= indirectBuffer[0]) { return; }

	float4 data = Input[index];

	float4 pos = mul(ObjToWorld, float4(data.xyz, 1));

	if (IsInFrustum(pos.xyz, -5))
	{
		float dist = length(pos);
		int t = index % frustumPlanes[5].w;

		if (t < dist)
		{
			return;
		}
		Output.Append(float4(pos.xyz, data.w));
	}
}

// ************* Cull shader *************
// can cull a maximum of (65535 * 128) 8,388,480 grass strains parallel
[numthreads(128, 1, 1)]
void TreeCull(uint3 id : SV_DispatchThreadID)
{
	int index = id.x;
	if (index >= indirectBuffer[0]) { return; }

	float4 data = Input[index];
	float4 pos = mul(ObjToWorld, float4(data.xyz, 1));

	if (IsInFrustum(pos.xyz, -15))
	{
		//Output.Append(float4(pos.xyz, data.w));
		//if (length(pos) > 150)
		{
			Output.Append(float4(pos.xyz, data.w));
		}
		if (length(pos) < 200)
		{
			closeBuffer.Append(float4(pos.xyz, data.w));
		}
	}
}

[numthreads(1, 1, 1)]
void FindQuad(uint3 id : SV_DispatchThreadID)
{
	half cutoff = 0.9f;
	int size = BillboardPlaneResolution;

	int _maxX = 0;
	int _maxY = 0;
	int _minX = size;
	int _minY = size;

	for (int x = 0; x < size; x++)
	{
		for (int y = 0; y < size; y++)
		{
			half2 uv = half2(x, y);
			half4 color = BillboardPlane[uv];

			if (color.w > cutoff)
			{
				_maxX = max(x, _maxX);
				_maxY = max(y, _maxY);

				_minX = min(x, _minX);
				_minY = min(y, _minY);
			}
		}
	}
	SmallestQuad.Append(float4(_minX, _maxX, _minY, _maxY));
}

// ************* Indirect *************
// may be used in the future for a performance increase
[numthreads(1, 1, 1)]
void IndirectGrass()
{
	indirectBuffer[0] = ceil(indirectBuffer[0] / 128.0); // mesh has 64000 vertices
}